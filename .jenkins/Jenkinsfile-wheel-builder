def configs = [
    [
        label: 'windows',
        versions: ['py27', 'py34', 'py35', 'py36', 'py37'],
    ],
    [
        label: 'windows64',
        versions: ['py27', 'py34', 'py35', 'py36', 'py37'],
    ],
    [
        label: 'sierra',
        versions: ['py27', 'py34'],
    ],
    [
        label: 'docker',
        imageName: 'quay.io/pypa/manylinux1_x86_64',
        versions: [
            'cp27-cp27m', 'cp27-cp27mu', 'cp34-cp34m',
        ],
    ],
    [
        label: 'docker',
        imageName: 'quay.io/pypa/manylinux1_i686',
        versions: [
            'cp27-cp27m', 'cp27-cp27mu', 'cp34-cp34m',
        ],
    ],
]


def build(version, label, imageName) {
    try {
        timeout(time: 30, unit: 'MINUTES') {
            if (label.contains("windows")) {
                def pythonPath = [
                    py27: "C:\\Python27\\python.exe",
                    py34: "C:\\Python34\\python.exe",
                    py35: "C:\\Python35\\python.exe",
                    py36: "C:\\Python36\\python.exe",
                    py37: "C:\\Python37\\python.exe"
                ]
                bat """
                    wmic qfe
                    @set PATH="C:\\Python27";"C:\\Python27\\Scripts";%PATH%
                    @set PYTHON="${pythonPath[version]}"

                    virtualenv -p %PYTHON% .release
                    call .release\\Scripts\\activate
                    pip install wheel virtualenv
                    pip wheel bcrypt --wheel-dir=wheelhouse --no-binary bcrypt
                    pip install -f wheelhouse bcrypt --no-index
                    python -c "import bcrypt;password = b'super secret password';hashed = bcrypt.hashpw(password, bcrypt.gensalt());bcrypt.checkpw(password, hashed)"
                """
            } else if (label.contains("sierra")) {
                def pythonPath = [
                    py27: "/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7",
                    py34: "/Library/Frameworks/Python.framework/Versions/3.4/bin/python3.4",
                ]
                ansiColor {
                    sh """#!/usr/bin/env bash
                        set -xe
                        # output the list of things we've installed as a point in time check of how up
                        # to date the builder is
                        /usr/sbin/system_profiler SPInstallHistoryDataType

                        # Jenkins logs in as a non-interactive shell, so we don't even have /usr/local/bin in PATH
                        export PATH="/usr/local/bin:\${PATH}"
                        export PATH="/Users/jenkins/.pyenv/shims:\${PATH}"

                        printenv

                        virtualenv .venv -p ${pythonPath[version]}
                        source .venv/bin/activate
                        pip install -U wheel # upgrade wheel to latest before we use it to build the wheel
                        pip install cffi six # install this with pip so we get TLS 1.2
                        REGEX="py3([0-9])*"
                        if [[ "${version}" =~ \$REGEX ]]; then
                            PY_LIMITED_API="--build-option --py-limited-api=cp3\${BASH_REMATCH[1]}"
                        fi
                        pip wheel bcrypt --no-binary bcrypt --no-deps --wheel-dir=wheelhouse \$PY_LIMITED_API
                        pip install -f wheelhouse bcrypt --no-index
                        python -c "import bcrypt;password = b'super secret password';hashed = bcrypt.hashpw(password, bcrypt.gensalt());bcrypt.checkpw(password, hashed)"
                    """
                }
            } else if (label.contains("docker")) {
                linux32 = ""
                if (imageName.contains("i686")) {
                    linux32 = "linux32"
                }
                sh """#!/usr/bin/env bash
                    set -x -e
                    LIBFFI_SHA256="d06ebb8e1d9a22d19e38d63fdb83954253f39bedc5d46232a05645685722ca37"
                    LIBFFI_VERSION="3.2.1"

                    function check_sha256sum {
                        local fname=\$1
                        local sha256=\$2
                        echo "\${sha256}  \${fname}" > \${fname}.sha256
                        sha256sum -c \${fname}.sha256
                    }
                    # Because we are doing this as root in the container, but we write to a mounted dir that is outside the container
                    # we need to make sure we set these files writable such that the jenkins user can delete them afterwards
                    mkdir -p tmpwheelhouse
                    mkdir -p wheelhouse
                    chmod -R 777 tmpwheelhouse
                    chmod -R 777 wheelhouse

                    # We need libffi because pip wheel won't use wheels at all
                    curl -#O https://mirrors.ocf.berkeley.edu/debian/pool/main/libf/libffi/libffi_\${LIBFFI_VERSION}.orig.tar.gz
                    check_sha256sum libffi_\${LIBFFI_VERSION}.orig.tar.gz \${LIBFFI_SHA256}
                    tar zxf libffi_\${LIBFFI_VERSION}.orig.tar.gz
                    # More root use permission nonsense
                    chmod -R 777 libffi*
                    pushd libffi-\${LIBFFI_VERSION}
                    # CFLAGS needed to override the Makefile and prevent -march optimization
                    # This flag set taken from Ubuntu 14.04's defaults. We should update it
                    # to use -fstack-protector-strong if/when gcc 4.9+ is added to the
                    # manylinux1 images.
                    $linux32 ./configure CFLAGS="-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security"
                    $linux32 make install
                    popd
                    # More root use permission nonsense
                    chmod -R 777 libffi*

                    $linux32 /opt/python/$version/bin/pip install cffi six
                    REGEX="cp3([0-9])*"
                    if [[ "${version}" =~ \$REGEX ]]; then
                        PY_LIMITED_API="--build-option --py-limited-api=cp3\${BASH_REMATCH[1]}"
                    fi
                    $linux32 /opt/python/$version/bin/pip wheel bcrypt --no-binary bcrypt --no-deps --wheel-dir=tmpwheelhouse \$PY_LIMITED_API
                    $linux32 auditwheel repair tmpwheelhouse/bcrypt*.whl -w wheelhouse/
                    $linux32 /opt/python/$version/bin/pip install bcrypt --no-index -f wheelhouse/
                    $linux32 /opt/python/$version/bin/python -c "import bcrypt;password = b'super secret password';hashed = bcrypt.hashpw(password, bcrypt.gensalt());bcrypt.checkpw(password, hashed)"
                """
            }
            archiveArtifacts artifacts: "**/wheelhouse/bcrypt*.whl"
        }
    } finally {
        deleteDir()
    }

}

def builders = [:]
for (config in configs) {
    def label = config["label"]
    def versions = config["versions"]

    for (_version in versions) {
        def version = _version

        if (label.contains("docker")) {
            def imageName = config["imageName"]
            def combinedName = "${imageName}-${version}"
            builders[combinedName] = {
                node(label) {
                    stage(combinedName) {
                        def buildImage = docker.image(imageName)
                        buildImage.pull()
                        buildImage.inside("-u root") {
                            build(version, label, imageName)
                        }
                    }
                }
            }
        } else {
            def combinedName = "${label}-${version}"
            builders[combinedName] = {
                node(label) {
                    stage(combinedName) {
                        build(version, label, "")
                    }
                }
            }
        }
    }
}

parallel builders
